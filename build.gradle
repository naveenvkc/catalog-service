plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'

	id 'jacoco'
	id 'org.sonarqube' version "4.3.1.3277"
}

group = 'com.polarbookshop.catalog'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('lombokVersion',"1.18.32")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation "io.swagger:swagger-annotations:1.5.14"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4"

	implementation "javax.annotation:javax.annotation-api:1.3.2"
	implementation "com.google.code.findbugs:jsr305:3.0.0"

	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'

	// -- Logging --
	implementation 'org.slf4j:slf4j-ext'

	// -- Util --
	implementation "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// https://mvnrepository.com/artifact/org.jetbrains/annotations
	implementation group: 'org.jetbrains', name: 'annotations', version: '26.0.2'



	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

bootBuildImage {
	imageName = "${project.name}"
	environment = [
			//'HTTP_PROXY' : 'http.docker.internal:3128',
			//'HTTPS_PROXY' : 'http.docker.internal:3128',
			'BP_JVM_VERSION' : '17.*'
	]
	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def coverageExclusions = [
		'**com/polarbookshop/catalog/config/openapi/**',
		'**/generated/**',
]

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'PACKAGE'
			includes = ['com.polarbookshop.catalog.*']
			excludes += coverageExclusions
			limit {
				minimum = 0.0
			}
		}
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: coverageExclusions)
		}))
	}
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
	}
}

def xmlPath = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
sonar {
	properties {
		property 'sonar.projectKey', 'polar-bookshop'
		property 'sonar.host.url', 'http://localhost:9000'

		property 'sonar.java.source', '17'

		property 'sonar.exclusions', coverageExclusions
		property 'sonar.coverage.exclusions', coverageExclusions
		property 'sonar.test.exclusions', '**/test/**/*.java'
		property 'sonar.coverage.jacoco.xmlReportPath', xmlPath
	}
}

// Build should fail if coverage less than minimum.
jacocoTestCoverageVerification.dependsOn jacocoTestReport
build.finalizedBy jacocoTestCoverageVerification
